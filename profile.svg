<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180"><g><title>dlopen (libdl-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="260" width="1.0060%" height="15" fill="rgb(227,0,7)"/><text x="0.3129%" y="270.50"></text></g><g><title>0x7f8889f9cb59 (libdl-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="276" width="1.0060%" height="15" fill="rgb(217,0,24)"/><text x="0.3129%" y="286.50"></text></g><g><title>_dl_catch_error (libc-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="292" width="1.0060%" height="15" fill="rgb(221,193,54)"/><text x="0.3129%" y="302.50"></text></g><g><title>_dl_catch_exception (libc-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="308" width="1.0060%" height="15" fill="rgb(248,212,6)"/><text x="0.3129%" y="318.50"></text></g><g><title>0x7f8889f9c34c (libdl-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="324" width="1.0060%" height="15" fill="rgb(208,68,35)"/><text x="0.3129%" y="334.50"></text></g><g><title>0x7f888a1e35fa (ld-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="340" width="1.0060%" height="15" fill="rgb(232,128,0)"/><text x="0.3129%" y="350.50"></text></g><g><title>_dl_catch_exception (libc-2.31.so) (32 samples, 1.01%)</title><rect x="0.0629%" y="356" width="1.0060%" height="15" fill="rgb(207,160,47)"/><text x="0.3129%" y="366.50"></text></g><g><title>&lt;module&gt; (torch/__init__.py:136) (38 samples, 1.19%)</title><rect x="0.0629%" y="148" width="1.1946%" height="15" fill="rgb(228,23,34)"/><text x="0.3129%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (38 samples, 1.19%)</title><rect x="0.0629%" y="164" width="1.1946%" height="15" fill="rgb(218,30,26)"/><text x="0.3129%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (38 samples, 1.19%)</title><rect x="0.0629%" y="180" width="1.1946%" height="15" fill="rgb(220,122,19)"/><text x="0.3129%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (38 samples, 1.19%)</title><rect x="0.0629%" y="196" width="1.1946%" height="15" fill="rgb(250,228,42)"/><text x="0.3129%" y="206.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (38 samples, 1.19%)</title><rect x="0.0629%" y="212" width="1.1946%" height="15" fill="rgb(240,193,28)"/><text x="0.3129%" y="222.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (38 samples, 1.19%)</title><rect x="0.0629%" y="228" width="1.1946%" height="15" fill="rgb(216,20,37)"/><text x="0.3129%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (38 samples, 1.19%)</title><rect x="0.0629%" y="244" width="1.1946%" height="15" fill="rgb(206,188,39)"/><text x="0.3129%" y="254.50"></text></g><g><title>&lt;module&gt; (test.py:1) (69 samples, 2.17%)</title><rect x="0.0000%" y="52" width="2.1691%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (69 samples, 2.17%)</title><rect x="0.0000%" y="68" width="2.1691%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (69 samples, 2.17%)</title><rect x="0.0000%" y="84" width="2.1691%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (69 samples, 2.17%)</title><rect x="0.0000%" y="100" width="2.1691%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (69 samples, 2.17%)</title><rect x="0.0000%" y="116" width="2.1691%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (69 samples, 2.17%)</title><rect x="0.0000%" y="132" width="2.1691%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="142.50">_..</text></g><g><title>THPVariable_dealloc (libtorch_python.so) (44 samples, 1.38%)</title><rect x="4.1811%" y="68" width="1.3832%" height="15" fill="rgb(249,33,26)"/><text x="4.4311%" y="78.50"></text></g><g><title>einsum (torch/functional.py:287) (87 samples, 2.73%)</title><rect x="6.2245%" y="68" width="2.7350%" height="15" fill="rgb(235,183,28)"/><text x="6.4745%" y="78.50">ei..</text></g><g><title>__getattr__ (torch/_VF.py:12) (33 samples, 1.04%)</title><rect x="14.9010%" y="84" width="1.0374%" height="15" fill="rgb(221,5,38)"/><text x="15.1510%" y="94.50"></text></g><g><title>at::native::setStrided (libtorch_cpu.so) (32 samples, 1.01%)</title><rect x="21.8485%" y="324" width="1.0060%" height="15" fill="rgb(247,18,42)"/><text x="22.0985%" y="334.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt;)&gt;::call (libtorch_cpu.so) (52 samples, 1.63%)</title><rect x="21.5027%" y="276" width="1.6347%" height="15" fill="rgb(241,131,45)"/><text x="21.7527%" y="286.50"></text></g><g><title>at::CPUType::as_strided (libtorch_cpu.so) (51 samples, 1.60%)</title><rect x="21.5341%" y="292" width="1.6033%" height="15" fill="rgb(249,31,29)"/><text x="21.7841%" y="302.50"></text></g><g><title>at::native::as_strided_tensorimpl (libtorch_cpu.so) (49 samples, 1.54%)</title><rect x="21.5970%" y="308" width="1.5404%" height="15" fill="rgb(225,111,53)"/><text x="21.8470%" y="318.50"></text></g><g><title>at::Tensor::as_strided (libtorch_cpu.so) (58 samples, 1.82%)</title><rect x="21.3455%" y="260" width="1.8233%" height="15" fill="rgb(238,160,17)"/><text x="21.5955%" y="270.50">a..</text></g><g><title>at::native::permute (libtorch_cpu.so) (84 samples, 2.64%)</title><rect x="21.0626%" y="244" width="2.6407%" height="15" fill="rgb(214,148,48)"/><text x="21.3126%" y="254.50">at..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (99 samples, 3.11%)</title><rect x="20.9054%" y="212" width="3.1122%" height="15" fill="rgb(232,36,49)"/><text x="21.1554%" y="222.50">c10..</text></g><g><title>at::TypeDefault::permute (libtorch_cpu.so) (99 samples, 3.11%)</title><rect x="20.9054%" y="228" width="3.1122%" height="15" fill="rgb(209,103,24)"/><text x="21.1554%" y="238.50">at:..</text></g><g><title>c10::TensorImpl::shallow_copy_and_detach (libc10.so) (39 samples, 1.23%)</title><rect x="25.6209%" y="244" width="1.2260%" height="15" fill="rgb(229,88,8)"/><text x="25.8709%" y="254.50"></text></g><g><title>torch::autograd::as_view (libtorch_cpu.so) (96 samples, 3.02%)</title><rect x="24.7092%" y="212" width="3.0179%" height="15" fill="rgb(213,181,19)"/><text x="24.9592%" y="222.50">tor..</text></g><g><title>torch::autograd::make_variable_differentiable_view (libtorch_cpu.so) (77 samples, 2.42%)</title><rect x="25.3065%" y="228" width="2.4206%" height="15" fill="rgb(254,191,54)"/><text x="25.5565%" y="238.50">to..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (263 samples, 8.27%)</title><rect x="19.8680%" y="180" width="8.2678%" height="15" fill="rgb(241,83,37)"/><text x="20.1180%" y="190.50">c10::detail:..</text></g><g><title>torch::autograd::VariableType::permute (libtorch_cpu.so) (262 samples, 8.24%)</title><rect x="19.8994%" y="196" width="8.2364%" height="15" fill="rgb(233,36,39)"/><text x="20.1494%" y="206.50">torch::auto..</text></g><g><title>at::Tensor::permute (libtorch_cpu.so) (290 samples, 9.12%)</title><rect x="19.2707%" y="164" width="9.1166%" height="15" fill="rgb(226,3,54)"/><text x="19.5207%" y="174.50">at::Tensor::p..</text></g><g><title>at::Tensor::as_strided (libtorch_cpu.so) (40 samples, 1.26%)</title><rect x="30.4936%" y="260" width="1.2575%" height="15" fill="rgb(245,192,40)"/><text x="30.7436%" y="270.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt;)&gt;::call (libtorch_cpu.so) (37 samples, 1.16%)</title><rect x="30.5879%" y="276" width="1.1632%" height="15" fill="rgb(238,167,29)"/><text x="30.8379%" y="286.50"></text></g><g><title>at::CPUType::as_strided (libtorch_cpu.so) (37 samples, 1.16%)</title><rect x="30.5879%" y="292" width="1.1632%" height="15" fill="rgb(232,182,51)"/><text x="30.8379%" y="302.50"></text></g><g><title>at::native::as_strided_tensorimpl (libtorch_cpu.so) (36 samples, 1.13%)</title><rect x="30.6193%" y="308" width="1.1317%" height="15" fill="rgb(231,60,39)"/><text x="30.8693%" y="318.50"></text></g><g><title>at::native::inferUnsqueezeGeometry (libtorch_cpu.so) (45 samples, 1.41%)</title><rect x="31.7510%" y="260" width="1.4146%" height="15" fill="rgb(208,69,12)"/><text x="32.0010%" y="270.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, long), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, long&gt; &gt;, at::Tensor(at::Tensor const&amp;, long)&gt;::call (libtorch_cpu.so) (100 samples, 3.14%)</title><rect x="30.2106%" y="212" width="3.1437%" height="15" fill="rgb(235,93,37)"/><text x="30.4606%" y="222.50">c10..</text></g><g><title>at::TypeDefault::unsqueeze (libtorch_cpu.so) (99 samples, 3.11%)</title><rect x="30.2421%" y="228" width="3.1122%" height="15" fill="rgb(213,116,39)"/><text x="30.4921%" y="238.50">at:..</text></g><g><title>at::native::unsqueeze (libtorch_cpu.so) (96 samples, 3.02%)</title><rect x="30.3364%" y="244" width="3.0179%" height="15" fill="rgb(222,207,29)"/><text x="30.5864%" y="254.50">at:..</text></g><g><title>torch::autograd::as_view (libtorch_cpu.so) (68 samples, 2.14%)</title><rect x="33.8258%" y="212" width="2.1377%" height="15" fill="rgb(206,96,30)"/><text x="34.0758%" y="222.50">t..</text></g><g><title>torch::autograd::make_variable_differentiable_view (libtorch_cpu.so) (51 samples, 1.60%)</title><rect x="34.3603%" y="228" width="1.6033%" height="15" fill="rgb(218,138,4)"/><text x="34.6103%" y="238.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, long), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, long&gt; &gt;, at::Tensor(at::Tensor const&amp;, long)&gt;::call (libtorch_cpu.so) (216 samples, 6.79%)</title><rect x="29.2675%" y="180" width="6.7903%" height="15" fill="rgb(250,191,14)"/><text x="29.5175%" y="190.50">c10::deta..</text></g><g><title>torch::autograd::VariableType::unsqueeze (libtorch_cpu.so) (215 samples, 6.76%)</title><rect x="29.2990%" y="196" width="6.7589%" height="15" fill="rgb(239,60,40)"/><text x="29.5490%" y="206.50">torch::au..</text></g><g><title>at::Tensor::unsqueeze (libtorch_python.so) (228 samples, 7.17%)</title><rect x="29.0475%" y="164" width="7.1676%" height="15" fill="rgb(206,27,48)"/><text x="29.2975%" y="174.50">at::Tensor..</text></g><g><title>torch::autograd::as_view (libtorch_cpu.so) (33 samples, 1.04%)</title><rect x="37.4411%" y="212" width="1.0374%" height="15" fill="rgb(225,35,8)"/><text x="37.6911%" y="222.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (70 samples, 2.20%)</title><rect x="36.3093%" y="180" width="2.2006%" height="15" fill="rgb(250,213,24)"/><text x="36.5593%" y="190.50">c..</text></g><g><title>torch::autograd::VariableType::view (libtorch_cpu.so) (70 samples, 2.20%)</title><rect x="36.3093%" y="196" width="2.2006%" height="15" fill="rgb(247,123,22)"/><text x="36.5593%" y="206.50">t..</text></g><g><title>at::Tensor::view (libtorch_python.so) (74 samples, 2.33%)</title><rect x="36.2150%" y="164" width="2.3263%" height="15" fill="rgb(231,138,38)"/><text x="36.4650%" y="174.50">a..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;long&gt;)&gt;::call (libtorch_cpu.so) (44 samples, 1.38%)</title><rect x="41.5907%" y="292" width="1.3832%" height="15" fill="rgb(231,145,46)"/><text x="41.8407%" y="302.50"></text></g><g><title>at::CPUType::as_strided (libtorch_cpu.so) (42 samples, 1.32%)</title><rect x="41.6536%" y="308" width="1.3203%" height="15" fill="rgb(251,118,11)"/><text x="41.9036%" y="318.50"></text></g><g><title>at::native::as_strided_tensorimpl (libtorch_cpu.so) (40 samples, 1.26%)</title><rect x="41.7164%" y="324" width="1.2575%" height="15" fill="rgb(217,147,25)"/><text x="41.9664%" y="334.50"></text></g><g><title>at::Tensor::as_strided (libtorch_cpu.so) (53 samples, 1.67%)</title><rect x="41.4335%" y="276" width="1.6661%" height="15" fill="rgb(247,81,37)"/><text x="41.6835%" y="286.50"></text></g><g><title>at::native::permute (libtorch_cpu.so) (85 samples, 2.67%)</title><rect x="40.9305%" y="260" width="2.6721%" height="15" fill="rgb(209,12,38)"/><text x="41.1805%" y="270.50">at..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (104 samples, 3.27%)</title><rect x="40.8362%" y="228" width="3.2694%" height="15" fill="rgb(227,1,9)"/><text x="41.0862%" y="238.50">c10..</text></g><g><title>at::TypeDefault::permute (libtorch_cpu.so) (103 samples, 3.24%)</title><rect x="40.8677%" y="244" width="3.2380%" height="15" fill="rgb(248,47,43)"/><text x="41.1177%" y="254.50">at:..</text></g><g><title>c10::TensorImpl::shallow_copy_and_detach (libc10.so) (50 samples, 1.57%)</title><rect x="46.0861%" y="260" width="1.5718%" height="15" fill="rgb(221,10,30)"/><text x="46.3361%" y="270.50"></text></g><g><title>torch::autograd::as_view (libtorch_cpu.so) (111 samples, 3.49%)</title><rect x="44.9230%" y="228" width="3.4895%" height="15" fill="rgb(210,229,1)"/><text x="45.1730%" y="238.50">tor..</text></g><g><title>torch::autograd::make_variable_differentiable_view (libtorch_cpu.so) (84 samples, 2.64%)</title><rect x="45.7718%" y="244" width="2.6407%" height="15" fill="rgb(222,148,37)"/><text x="46.0218%" y="254.50">to..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (280 samples, 8.80%)</title><rect x="39.9560%" y="196" width="8.8023%" height="15" fill="rgb(234,67,33)"/><text x="40.2060%" y="206.50">c10::detail:..</text></g><g><title>torch::autograd::VariableType::permute (libtorch_cpu.so) (280 samples, 8.80%)</title><rect x="39.9560%" y="212" width="8.8023%" height="15" fill="rgb(247,98,35)"/><text x="40.2060%" y="222.50">torch::autog..</text></g><g><title>at::Tensor::permute (libtorch_cpu.so) (289 samples, 9.09%)</title><rect x="39.7988%" y="180" width="9.0852%" height="15" fill="rgb(247,138,52)"/><text x="40.0488%" y="190.50">at::Tensor::p..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (64 samples, 2.01%)</title><rect x="51.0846%" y="308" width="2.0119%" height="15" fill="rgb(213,79,30)"/><text x="51.3346%" y="318.50">c..</text></g><g><title>at::CPUType::view (libtorch_cpu.so) (63 samples, 1.98%)</title><rect x="51.1160%" y="324" width="1.9805%" height="15" fill="rgb(246,177,23)"/><text x="51.3660%" y="334.50">a..</text></g><g><title>at::native::view (libtorch_cpu.so) (61 samples, 1.92%)</title><rect x="51.1789%" y="340" width="1.9176%" height="15" fill="rgb(230,62,27)"/><text x="51.4289%" y="350.50">a..</text></g><g><title>c10::TensorImpl::shallow_copy_and_detach (libc10.so) (34 samples, 1.07%)</title><rect x="54.3854%" y="340" width="1.0688%" height="15" fill="rgb(216,154,8)"/><text x="54.6354%" y="350.50"></text></g><g><title>torch::autograd::as_view (libtorch_cpu.so) (75 samples, 2.36%)</title><rect x="53.6624%" y="308" width="2.3577%" height="15" fill="rgb(244,35,45)"/><text x="53.9124%" y="318.50">t..</text></g><g><title>torch::autograd::make_variable_differentiable_view (libtorch_cpu.so) (62 samples, 1.95%)</title><rect x="54.0710%" y="324" width="1.9491%" height="15" fill="rgb(251,115,12)"/><text x="54.3210%" y="334.50">t..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (193 samples, 6.07%)</title><rect x="50.2672%" y="276" width="6.0673%" height="15" fill="rgb(240,54,50)"/><text x="50.5172%" y="286.50">c10::det..</text></g><g><title>torch::autograd::VariableType::view (libtorch_cpu.so) (192 samples, 6.04%)</title><rect x="50.2986%" y="292" width="6.0358%" height="15" fill="rgb(233,84,52)"/><text x="50.5486%" y="302.50">torch::a..</text></g><g><title>at::Tensor::view (libtorch_python.so) (206 samples, 6.48%)</title><rect x="49.9214%" y="260" width="6.4760%" height="15" fill="rgb(207,117,47)"/><text x="50.1714%" y="270.50">at::Tens..</text></g><g><title>at::TypeDefault::reshape (libtorch_cpu.so) (255 samples, 8.02%)</title><rect x="49.4499%" y="228" width="8.0163%" height="15" fill="rgb(249,43,39)"/><text x="49.6999%" y="238.50">at::TypeDef..</text></g><g><title>at::native::reshape (libtorch_cpu.so) (253 samples, 7.95%)</title><rect x="49.5127%" y="244" width="7.9535%" height="15" fill="rgb(209,38,44)"/><text x="49.7627%" y="254.50">at::native:..</text></g><g><title>at::Tensor::reshape (libtorch_python.so) (274 samples, 8.61%)</title><rect x="48.8840%" y="180" width="8.6136%" height="15" fill="rgb(236,212,23)"/><text x="49.1340%" y="190.50">at::Tensor::..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (261 samples, 8.20%)</title><rect x="49.2927%" y="196" width="8.2050%" height="15" fill="rgb(242,79,21)"/><text x="49.5427%" y="206.50">c10::detail..</text></g><g><title>torch::autograd::VariableType::reshape (libtorch_cpu.so) (261 samples, 8.20%)</title><rect x="49.2927%" y="212" width="8.2050%" height="15" fill="rgb(211,96,35)"/><text x="49.5427%" y="222.50">torch::auto..</text></g><g><title>at::Tensor::size (libtorch_python.so) (44 samples, 1.38%)</title><rect x="57.4976%" y="180" width="1.3832%" height="15" fill="rgb(253,215,40)"/><text x="57.7476%" y="190.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (48 samples, 1.51%)</title><rect x="59.2895%" y="228" width="1.5090%" height="15" fill="rgb(211,81,21)"/><text x="59.5395%" y="238.50"></text></g><g><title>at::CPUType::view (libtorch_cpu.so) (48 samples, 1.51%)</title><rect x="59.2895%" y="244" width="1.5090%" height="15" fill="rgb(208,190,38)"/><text x="59.5395%" y="254.50"></text></g><g><title>at::native::view (libtorch_cpu.so) (46 samples, 1.45%)</title><rect x="59.3524%" y="260" width="1.4461%" height="15" fill="rgb(235,213,38)"/><text x="59.6024%" y="270.50"></text></g><g><title>torch::autograd::as_view (libtorch_cpu.so) (47 samples, 1.48%)</title><rect x="61.1757%" y="228" width="1.4775%" height="15" fill="rgb(237,122,38)"/><text x="61.4257%" y="238.50"></text></g><g><title>torch::autograd::make_variable_differentiable_view (libtorch_cpu.so) (39 samples, 1.23%)</title><rect x="61.4272%" y="244" width="1.2260%" height="15" fill="rgb(244,218,35)"/><text x="61.6772%" y="254.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;long&gt; &gt; &gt;, at::Tensor(at::Tensor const&amp;, c10::ArrayRef&lt;long&gt;)&gt;::call (libtorch_cpu.so) (122 samples, 3.84%)</title><rect x="58.9752%" y="196" width="3.8353%" height="15" fill="rgb(240,68,47)"/><text x="59.2252%" y="206.50">c10:..</text></g><g><title>torch::autograd::VariableType::view (libtorch_cpu.so) (122 samples, 3.84%)</title><rect x="58.9752%" y="212" width="3.8353%" height="15" fill="rgb(210,16,53)"/><text x="59.2252%" y="222.50">torc..</text></g><g><title>at::Tensor::view (libtorch_python.so) (126 samples, 3.96%)</title><rect x="58.8809%" y="180" width="3.9610%" height="15" fill="rgb(235,124,12)"/><text x="59.1309%" y="190.50">at::..</text></g><g><title>at::native::empty_cpu (libtorch_cpu.so) (65 samples, 2.04%)</title><rect x="66.2999%" y="356" width="2.0434%" height="15" fill="rgb(224,169,11)"/><text x="66.5499%" y="366.50">a..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (libtorch_cpu.so) (90 samples, 2.83%)</title><rect x="65.6083%" y="292" width="2.8293%" height="15" fill="rgb(250,166,2)"/><text x="65.8583%" y="302.50">c1..</text></g><g><title>at::(anonymous namespace)::empty_memory_format (libtorch_cpu.so) (89 samples, 2.80%)</title><rect x="65.6397%" y="308" width="2.7979%" height="15" fill="rgb(242,216,29)"/><text x="65.8897%" y="318.50">at..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor(c10::ArrayRef&lt;long&gt;, c10::TensorOptions const&amp;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (libtorch_cpu.so) (79 samples, 2.48%)</title><rect x="65.9541%" y="324" width="2.4835%" height="15" fill="rgb(230,116,27)"/><text x="66.2041%" y="334.50">c1..</text></g><g><title>at::CPUType::empty_memory_format (libtorch_cpu.so) (76 samples, 2.39%)</title><rect x="66.0484%" y="340" width="2.3892%" height="15" fill="rgb(228,99,48)"/><text x="66.2984%" y="350.50">at..</text></g><g><title>at::empty (libtorch_cpu.so) (125 samples, 3.93%)</title><rect x="64.5395%" y="276" width="3.9296%" height="15" fill="rgb(253,11,6)"/><text x="64.7895%" y="286.50">at::..</text></g><g><title>0x7f888a03cc5f (libc-2.31.so) (32 samples, 1.01%)</title><rect x="70.9211%" y="420" width="1.0060%" height="15" fill="rgb(247,143,39)"/><text x="71.1711%" y="430.50"></text></g><g><title>THStorage_resize (libtorch_cpu.so) (57 samples, 1.79%)</title><rect x="70.2609%" y="356" width="1.7919%" height="15" fill="rgb(236,97,10)"/><text x="70.5109%" y="366.50">T..</text></g><g><title>c10::DefaultCPUAllocator::allocate (libc10.so) (52 samples, 1.63%)</title><rect x="70.4181%" y="372" width="1.6347%" height="15" fill="rgb(233,208,19)"/><text x="70.6681%" y="382.50"></text></g><g><title>c10::alloc_cpu (libc10.so) (51 samples, 1.60%)</title><rect x="70.4495%" y="388" width="1.6033%" height="15" fill="rgb(216,164,2)"/><text x="70.6995%" y="398.50"></text></g><g><title>posix_memalign (libc-2.31.so) (43 samples, 1.35%)</title><rect x="70.7010%" y="404" width="1.3518%" height="15" fill="rgb(220,129,5)"/><text x="70.9510%" y="414.50"></text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor&amp; (*)(at::Tensor&amp;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::MemoryFormat&gt;), at::Tensor&amp;, c10::guts::typelist::typelist&lt;at::Tensor&amp;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::MemoryFormat&gt; &gt; &gt;, at::Tensor&amp; (at::Tensor&amp;, c10::ArrayRef&lt;long&gt;, c10::optional&lt;c10::MemoryFormat&gt;)&gt;::call (libtorch_cpu.so) (79 samples, 2.48%)</title><rect x="69.8208%" y="324" width="2.4835%" height="15" fill="rgb(242,17,10)"/><text x="70.0708%" y="334.50">c1..</text></g><g><title>at::native::resize_ (libtorch_cpu.so) (77 samples, 2.42%)</title><rect x="69.8837%" y="340" width="2.4206%" height="15" fill="rgb(242,107,0)"/><text x="70.1337%" y="350.50">at..</text></g><g><title>at::Tensor::resize_ (libtorch_cpu.so) (90 samples, 2.83%)</title><rect x="69.5064%" y="308" width="2.8293%" height="15" fill="rgb(251,28,31)"/><text x="69.7564%" y="318.50">at..</text></g><g><title>futex_wake (futex.h:66) (52 samples, 1.63%)</title><rect x="77.1141%" y="340" width="1.6347%" height="15" fill="rgb(233,223,10)"/><text x="77.3641%" y="350.50"></text></g><g><title>gomp_team_end (team.c:935) (56 samples, 1.76%)</title><rect x="77.0827%" y="324" width="1.7605%" height="15" fill="rgb(215,21,27)"/><text x="77.3327%" y="334.50"></text></g><g><title>at::native::bmm_out_or_baddbmm_(at::Tensor&amp;, at::Tensor const&amp;, at::Tensor const&amp;, c10::Scalar, c10::Scalar, bool)::{lambda()#2}::operator() const (libtorch_cpu.so) (163 samples, 5.12%)</title><rect x="74.0019%" y="308" width="5.1242%" height="15" fill="rgb(232,23,21)"/><text x="74.2519%" y="318.50">at::na..</text></g><g><title>at::native::bmm_cpu (libtorch_cpu.so) (508 samples, 15.97%)</title><rect x="63.8164%" y="260" width="15.9698%" height="15" fill="rgb(244,5,23)"/><text x="64.0664%" y="270.50">at::native::bmm_cpu (libt..</text></g><g><title>at::native::bmm_out_cpu (libtorch_cpu.so) (360 samples, 11.32%)</title><rect x="68.4690%" y="276" width="11.3172%" height="15" fill="rgb(226,81,46)"/><text x="68.7190%" y="286.50">at::native::bmm_o..</text></g><g><title>at::native::bmm_out_or_baddbmm_ (libtorch_cpu.so) (345 samples, 10.85%)</title><rect x="68.9406%" y="292" width="10.8456%" height="15" fill="rgb(247,70,30)"/><text x="69.1906%" y="302.50">at::native::bmm_..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, at::Tensor const&amp;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, at::Tensor const&amp;&gt; &gt;, at::Tensor(at::Tensor const&amp;, at::Tensor const&amp;)&gt;::call (libtorch_cpu.so) (517 samples, 16.25%)</title><rect x="63.7535%" y="228" width="16.2528%" height="15" fill="rgb(212,68,19)"/><text x="64.0035%" y="238.50">c10::detail::wrap_kernel_..</text></g><g><title>at::CPUType::bmm (libtorch_cpu.so) (517 samples, 16.25%)</title><rect x="63.7535%" y="244" width="16.2528%" height="15" fill="rgb(240,187,13)"/><text x="64.0035%" y="254.50">at::CPUType::bmm (libtorc..</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(at::Tensor const&amp;, at::Tensor const&amp;), at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, at::Tensor const&amp;&gt; &gt;, at::Tensor(at::Tensor const&amp;, at::Tensor const&amp;)&gt;::call (libtorch_cpu.so) (544 samples, 17.10%)</title><rect x="63.3763%" y="196" width="17.1015%" height="15" fill="rgb(223,113,26)"/><text x="63.6263%" y="206.50">c10::detail::wrap_kernel_f..</text></g><g><title>torch::autograd::VariableType::bmm (libtorch_cpu.so) (543 samples, 17.07%)</title><rect x="63.4077%" y="212" width="17.0701%" height="15" fill="rgb(206,192,2)"/><text x="63.6577%" y="222.50">torch::autograd::VariableT..</text></g><g><title>c10::Dispatcher::callUnboxed&lt;at::Tensor, at::Tensor const&amp;, at::Tensor const&amp;&gt; (libtorch_python.so) (551 samples, 17.32%)</title><rect x="63.1877%" y="180" width="17.3216%" height="15" fill="rgb(241,108,4)"/><text x="63.4377%" y="190.50">c10::Dispatcher::callUnboxe..</text></g><g><title>at::native::sumproduct_pair [clone .constprop.446] (libtorch_cpu.so) (1,403 samples, 44.11%)</title><rect x="38.8243%" y="164" width="44.1056%" height="15" fill="rgb(247,173,49)"/><text x="39.0743%" y="174.50">at::native::sumproduct_pair [clone .constprop.446] (libtorch_cpu.so)</text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::reset_ (libtorch_cpu.so) (33 samples, 1.04%)</title><rect x="82.9613%" y="164" width="1.0374%" height="15" fill="rgb(224,114,35)"/><text x="83.2113%" y="174.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (41 samples, 1.29%)</title><rect x="85.4134%" y="244" width="1.2889%" height="15" fill="rgb(245,159,27)"/><text x="85.6634%" y="254.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_istream (istream:608) (44 samples, 1.38%)</title><rect x="85.3505%" y="228" width="1.3832%" height="15" fill="rgb(245,172,44)"/><text x="85.6005%" y="238.50"></text></g><g><title>std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (sstream:774) (73 samples, 2.29%)</title><rect x="84.9104%" y="180" width="2.2949%" height="15" fill="rgb(236,23,11)"/><text x="85.1604%" y="190.50">s..</text></g><g><title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream (istream:860) (63 samples, 1.98%)</title><rect x="85.2248%" y="196" width="1.9805%" height="15" fill="rgb(205,117,38)"/><text x="85.4748%" y="206.50">s..</text></g><g><title>std::basic_iostream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_iostream (istream:860) (62 samples, 1.95%)</title><rect x="85.2562%" y="212" width="1.9491%" height="15" fill="rgb(237,72,25)"/><text x="85.5062%" y="222.50">s..</text></g><g><title>std::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (sstream:775) (97 samples, 3.05%)</title><rect x="84.6275%" y="164" width="3.0494%" height="15" fill="rgb(244,70,9)"/><text x="84.8775%" y="174.50">std..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::push_back (libtorch_python.so) (37 samples, 1.16%)</title><rect x="92.0151%" y="164" width="1.1632%" height="15" fill="rgb(217,125,39)"/><text x="92.2651%" y="174.50"></text></g><g><title>at::native::einsum (libtorch_cpu.so) (2,432 samples, 76.45%)</title><rect x="17.0701%" y="148" width="76.4539%" height="15" fill="rgb(235,36,10)"/><text x="17.3201%" y="158.50">at::native::einsum (libtorch_cpu.so)</text></g><g><title>at::TypeDefault::einsum (libtorch_cpu.so) (2,445 samples, 76.86%)</title><rect x="17.0072%" y="132" width="76.8626%" height="15" fill="rgb(251,123,47)"/><text x="17.2572%" y="142.50">at::TypeDefault::einsum (libtorch_cpu.so)</text></g><g><title>c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(std::string, c10::ArrayRef&lt;at::Tensor&gt;), at::Tensor, c10::guts::typelist::typelist&lt;std::string, c10::ArrayRef&lt;at::Tensor&gt; &gt; &gt;, at::Tensor(std::string, c10::ArrayRef&lt;at::Tensor&gt;)&gt;::call (libtorch_cpu.so) (2,464 samples, 77.46%)</title><rect x="16.5986%" y="100" width="77.4599%" height="15" fill="rgb(221,13,13)"/><text x="16.8486%" y="110.50">c10::detail::wrap_kernel_functor_unboxed_&lt;c10::detail::WrapRuntimeKernelFunctor_&lt;at::Tensor (*)(std::string, c10::ArrayRef&lt;at::Te..</text></g><g><title>torch::autograd::VariableType::einsum (libtorch_cpu.so) (2,460 samples, 77.33%)</title><rect x="16.7243%" y="116" width="77.3342%" height="15" fill="rgb(238,131,9)"/><text x="16.9743%" y="126.50">torch::autograd::VariableType::einsum (libtorch_cpu.so)</text></g><g><title>pybind11::detail::load_type&lt;std::string&gt; (libtorch_python.so) (40 samples, 1.26%)</title><rect x="97.2964%" y="116" width="1.2575%" height="15" fill="rgb(211,50,8)"/><text x="97.5464%" y="126.50"></text></g><g><title>torch::PythonArgs::tensorlist (libtorch_python.so) (105 samples, 3.30%)</title><rect x="95.8504%" y="100" width="3.3008%" height="15" fill="rgb(245,182,24)"/><text x="96.1004%" y="110.50">tor..</text></g><g><title>torch::autograd::THPVariable_einsum (libtorch_python.so) (2,669 samples, 83.90%)</title><rect x="16.0013%" y="84" width="83.9044%" height="15" fill="rgb(242,14,37)"/><text x="16.2513%" y="94.50">torch::autograd::THPVariable_einsum (libtorch_python.so)</text></g><g><title>all (3,181 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (test.py:7) (3,103 samples, 97.55%)</title><rect x="2.4521%" y="52" width="97.5479%" height="15" fill="rgb(213,55,15)"/><text x="2.7021%" y="62.50">&lt;module&gt; (test.py:7)</text></g><g><title>einsum (torch/functional.py:292) (2,880 samples, 90.54%)</title><rect x="9.4624%" y="68" width="90.5376%" height="15" fill="rgb(209,9,3)"/><text x="9.7124%" y="78.50">einsum (torch/functional.py:292)</text></g></svg></svg>